{"version":3,"sources":["Components/Card/Card.js","Components/CardList/CardList.js","Components/SearchBox/SearchBox.js","Components/Scroll/Scroll.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","robot","i","Components_Card_Card","key","SearchBox","ChangeField","AlphabeticOrder","type","placeholder","onChange","onClick","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","checked","state","Compare","b","nameA","toLowerCase","nameB","comparison","onRequestRobots","_this$props","searchField","onSearchChange","isPedding","filteredRobots","filter","includes","sort","console","log","Components_SearchBox_SearchBox","Components_Scroll_Scroll","Components_CardList_CardList","Component","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0e5974e.chunk.js","sourcesContent":["import React  from  'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return(\r\n    <div\r\n      className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"\r\n      >\r\n      <img alt=\"robot\"\r\n        src={`https://robohash.org/${id}?200x200`}\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from '../Card/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return(\r\n    <div>\r\n      {robots.map((robot,i) => {\r\n        return(\r\n          <Card\r\n            key={i}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            email={robot.email}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\n export default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ ChangeField, AlphabeticOrder }) => {\r\n  return(\r\n    <div>\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue \"\r\n        type=\"search\"\r\n        name=\"robot\"\r\n        placeholder=\"search robot\"\r\n        onChange={ChangeField}\r\n      />\r\n      <h4>\r\n        In Ascending Alphabetical Order ?\r\n      </h4>\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"checked\"\r\n        onClick={AlphabeticOrder}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY:\"scroll\",border:\"2px solid black\", height:\"500px\"}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport { connect }  from 'react-redux';\r\n\r\nimport CardList from '../Components/CardList/CardList';\r\nimport SearchBox from '../Components/SearchBox/SearchBox';\r\nimport Scroll from '../Components/Scroll/Scroll';\r\n\r\nimport './App.css';\r\nimport 'tachyons';\r\n\r\nimport { setSearchField, requestRobots  } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    isPedding: state.requestRobots.isPedding,\r\n    robots: state.requestRobots.robots,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      checked:false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  AlphabeticOrder = () => {\r\n    this.setState({\r\n      checked: !this.state.checked\r\n    })\r\n  }\r\n\r\n  Compare = (a,b) =>{\r\n\r\n    const nameA = a.name.toLowerCase();\r\n    const nameB = b.name.toLowerCase();\r\n\r\n    let comparison = 0;\r\n    if (nameA > nameB) {\r\n      comparison = 1;\r\n    } else if (nameA < nameB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n  render(){\r\n\r\n    const { checked } = this.state;\r\n    const { searchField, onSearchChange, isPedding, robots } = this.props;\r\n\r\n    const filteredRobots = robots.filter( robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n      || robot.email.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n\r\n    checked\r\n    ? (filteredRobots.sort(this.Compare))\r\n    : console.log(checked)\r\n\r\n    return (isPedding)\r\n    ? <h1>Loading ... </h1>\r\n    : (\r\n        <div className=\"tc\">\r\n          <div className=\"bg\">\r\n            <h1>Robot Friends</h1>\r\n            <SearchBox\r\n              onSearchChange={onSearchChange}\r\n              AlphabeticOrder={this.AlphabeticOrder}\r\n             />\r\n          </div>\r\n            <Scroll>\r\n              <CardList robots={filteredRobots} />\r\n            </Scroll>\r\n        </div>\r\n      )\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  ALPHABETIC_ORDER,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n              } from './constants';\r\n\r\nexport const setSearchField = (text)  =>   ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type:REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error }))\r\n}\r\n","\r\n\r\nexport const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n              } from './constants';\r\n\r\n\r\nconst initialStateSearch ={\r\n  searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\r\n  switch(action.type){\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots  = {\r\n  isPedding: false,\r\n  robots:[],\r\n  error:\"\"\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({},state,{ isPedding: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state,{robots: action.payload, isPedding: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPedding: false})\r\n    default:\r\n      return  state\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport   thunkMiddleware    from 'redux-thunk';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nimport { searchRobots, requestRobots } from './reducers';\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store} >\r\n      <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}